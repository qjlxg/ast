name: Combine, Sort, and Append Buy Signals

on:
  # 1. 定时运行 (Schedule)
  # 每天 UTC 时间 09:00 运行。
  # UTC 09:00 对应于上海时间 (UTC+8) 的 17:00 (下午 5 点)。
  schedule:
    - cron: '0 9 * * *'
  
  # 2. 文件变动时运行 (Push)
  # 当 combine_and_sort.py 或工作流文件本身有变动时触发
  push:
    branches:
      - main # 或你的主分支名称
    paths:
      - 'combine_and_sort.py'
      - '.github/workflows/combine.yml'
      
  # 3. 允许手动触发
  workflow_dispatch:

jobs:
  combine_csvs:
    # 设置运行环境为最新的 Ubuntu
    runs-on: ubuntu-latest
    
    # 使用 env 设置时区，确保 Python 脚本中的 datetime.now() 正确获取上海日期
    env:
      TZ: 'Asia/Shanghai' 

    steps:
      # 1. 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4
        # 需要 fetch-depth: 0 才能正确处理后续的 git commit/push
        with:
          fetch-depth: 0

      # 2. 设置 Python 环境
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      # 3. 安装依赖 (需要 pandas 和 pytz)
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas pytz

      # 4. 运行 Python 脚本
      - name: Run CSV combination script
        run: python combine_and_sort.py
        # 脚本内部会根据当前时区 (TZ 环境变量) 确定日期和文件路径

      # 5. 配置 Git 用户
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          
      # 6. 检查是否有更改并提交
      - name: Commit and Push changes
        run: |
          # 检查 combined_results 目录是否有新文件或修改
          if [ -n "$(git status --porcelain combined_results)" ]; then
            echo "发现新生成的或修改的 combined_results 文件，开始提交..."
            # 添加所有更改的文件
            git add combined_results
            # 获取当前日期用于 commit message (使用 $TZ 环境变量)
            DATE_STR=$(TZ='${{ env.TZ }}' date +%Y%m%d)
            # 提交更改
            git commit -m "Auto: Combined and sorted signals for $DATE_STR"
            # 推送到当前分支
            git push
          else
            echo "没有新的 combined_results 文件生成/修改，无需提交。"
          fi
