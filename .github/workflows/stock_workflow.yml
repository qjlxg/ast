name: buy_signals—2

on:
  # 触发器 1: 监听对指定文件的 push 操作
  push:
    paths:
      - '.github/workflows/stock_workflow.yml'
      - 'stock_analysis_v2.py'
  
  # 触发器 2: 允许手动触发 (在 GitHub Actions 页面可见)
  workflow_dispatch:
    # 保持为空即可，允许不带任何参数的手动运行

  
  schedule:
   - cron: '*/130 * * * *'
permissions:
  contents: write  # 允许读写仓库内容

concurrency:
  group: stock-analysis-workflow
  cancel-in-progress: false

jobs:
  run_analysis:
    # 设置运行环境为最新的 Ubuntu
    runs-on: ubuntu-latest
    
    # 关键设置：将整个 Job 的时区设置为上海时间
    env:
      TZ: Asia/Shanghai

    steps:
    - name: 检出代码 (Checkout Repository)
      uses: actions/checkout@v4
      # 注意：actions/checkout@v4 默认使用 GITHUB_TOKEN，该 token 具有推送权限。

    - name: 设置 Python 环境 (Set up Python)
      uses: actions/setup-python@v5
      with:
        python-version: '3.10' # 确保使用兼容的 Python 版本

    - name: 安装依赖 (Install dependencies)
      run: |
        pip install --upgrade pip
        pip install pandas  # 确保安装了 pandas
        echo "依赖安装步骤完成。"

    - name: 运行脚本 (Run Stock Analysis Script)
      run: |
        echo "工作流当前运行的时区和时间: $TZ $(date)"
        python stock_analysis_v2.py
        
    # --- 提交并推送结果到仓库 (修复了 Rebase 错误) ---
    - name: 提交并推送结果 (Commit and Push Results)
      # 仅在脚本成功运行后执行
      if: success()
      run: |
        # 1. 配置 Git 用户信息（使用 GitHub Actions bot 身份）
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
        # 2. 添加 buy_signals 目录下的所有文件 (此目录包含生成的CSV)
        git add buy_signals
        
        # 3. 检查是否有文件更改或新增 (防止空提交)
        if git diff --cached --exit-code > /dev/null 2>&1; then
          echo "✅ 目录 'buy_signals' 中没有新的分析结果，跳过 Git 提交和推送。"
          exit 0
        fi
        
        # 4. 【修复点】提交更改
        #    必须在 'git pull --rebase' 之前进行提交，以清空暂存区，
        #    避免 "Your index contains uncommitted changes" 错误。
        TIMESTAMP=$(date +%Y%m%d%H%M)
        COMMIT_MESSAGE="🤖 Auto: Add/Update stock buy signals for ${TIMESTAMP}"
        git commit -m "$COMMIT_MESSAGE" || {
          echo "❌ 提交失败，请检查。"
          exit 1
        }

        # 5. 拉取最新代码，解决潜在冲突（使用 rebase 保持历史线性）
        #    本地更改（第4步的提交）现在是干净的，可以安全执行 rebase。
        git pull --rebase origin main || {
          echo "❌ Rebase 失败，可能有冲突，请手动检查仓库。"
          exit 1
        }
        
        # 6. 推送到仓库（使用默认的 GITHUB_TOKEN 权限）
        git push origin main
        echo "✅ 已将最新的分析结果推送回仓库。"
