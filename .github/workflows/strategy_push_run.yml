name: Strategy Run on Code or Data Push (推送触发)

on:
  # 当推送到 main 分支时触发
  push:
    branches:
      - main
    paths:
      # 当这些文件或目录发生变动时触发
      - 'breakout_strategy.py'
      - '.github/workflows/strategy_push_run.yml'
      - 'stock_data/**' # <-- 股票数据目录内容变动时也触发
  
  # 允许手动触发
  workflow_dispatch:

jobs:
  run_strategy:
    runs-on: ubuntu-latest

    # 设置时区为上海，并配置 Shell 使其使用该时区
    env:
      TZ: Asia/Shanghai

    steps:
    - name: Checkout repository
      # 检出代码，包括 stock_data 目录
      uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      # 只需要安装 pandas
      run: |
        python -m pip install --upgrade pip
        pip install pandas

    - name: Get Latest Trading Date (T-1 日)
      # 获取昨天的日期作为策略的买入日 T
      id: date
      run: |
        YESTERDAY=$(date -d "yesterday" +'%Y%m%d')
        echo "STRATEGY_DATE=${YESTERDAY}" >> $GITHUB_ENV
      shell: bash

    - name: Run Python Strategy Script (Multithreaded)
      # 运行策略脚本
      run: python breakout_strategy.py ${{ env.STRATEGY_DATE }}

    - name: Print Results to Action Log
      # 打印结果，结果文件 buy_signals.csv 仍然生成，但只保留在 runner 的日志中
      run: |
        echo "--- Strategy Run Completed ---"
        echo "Generated Buy Signals:"
        # 如果文件不存在，cat 会报错，使用 || true 避免失败
        cat buy_signals.csv || echo "buy_signals.csv not generated."
